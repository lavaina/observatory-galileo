// Generated by CoffeeScript 1.6.3
(function() {
  var ConsoleLogger, GenericEmitter, LOGLEVEL, Logger, MessageEmitter, Observatory, Toolbox, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof require !== "undefined" && require !== null) {
    Observatory = (require('./Observatory.coffee')).Observatory;
    MessageEmitter = Observatory.MessageEmitter, GenericEmitter = Observatory.GenericEmitter, Logger = Observatory.Logger, ConsoleLogger = Observatory.ConsoleLogger, LOGLEVEL = Observatory.LOGLEVEL;
  }

  Observatory = Observatory != null ? Observatory : {};

  Toolbox = (function(_super) {
    __extends(Toolbox, _super);

    function Toolbox() {
      _ref = Toolbox.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Toolbox.prototype.exec = function(f, options) {
      var e, ret, t, t2;
      if (options == null) {
        options = {
          errors: true,
          profile: true,
          profileLoglevel: LOGLEVEL.INFO,
          message: "exec() call"
        };
      }
      if (options.profile) {
        t = new Date;
      }
      if (options.errors) {
        try {
          ret = f();
          if (options.profile) {
            t2 = new Date - t;
          }
        } catch (_error) {
          e = _error;
          trace(e);
        }
      } else {
        ret = f();
        if (options.profile) {
          t2 = new Date - t;
        }
      }
      if (options.profile) {
        return this._emitWithSeverity(options.profileLoglevel, options.message + (" done in " + t2 + " ms"));
      }
    };

    return Toolbox;

  })(GenericEmitter);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Observatory = this;

}).call(this);

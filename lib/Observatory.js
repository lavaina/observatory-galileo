// Generated by CoffeeScript 1.6.3
(function() {
  var Observatory, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  Observatory = {
    LOGLEVEL: {
      SILENT: -1,
      FATAL: 0,
      ERROR: 1,
      WARNING: 2,
      INFO: 3,
      VERBOSE: 4,
      DEBUG: 5,
      MAX: 6,
      NAMES: ["FATAL", "ERROR", "WARNING", "INFO", "VERBOSE", "DEBUG", "MAX"]
    }
  };

  Observatory.MessageEmitter = (function() {
    var _loggers;

    _loggers = [];

    MessageEmitter.prototype._getLoggers = function() {
      return this._loggers;
    };

    function MessageEmitter(name) {
      this.name = name;
      this._loggers = [];
    }

    MessageEmitter.prototype.subscribeLogger = function(logger) {
      return this._loggers.push(logger);
    };

    MessageEmitter.prototype.unsubscribeLogger = function(logger) {
      return this._loggers = _.without(this._loggers, logger);
    };

    MessageEmitter.prototype.emitMessage = function(message) {
      var l, _i, _len, _ref;
      _ref = this._loggers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        l.addMessage(message);
      }
      return true;
    };

    return MessageEmitter;

  })();

  Observatory.Logger = (function() {
    var messageBuffer;

    messageBuffer = [];

    function Logger(name, func) {
      this.name = name;
      this.messageBuffer = [];
      this.func = func;
    }

    Logger.prototype.messageAcceptable = function(m) {
      return (m.timestamp != null) && (m.severity != null) && (m.isServer != null) && ((m.textMessage != null) || (m.htmlMessage != null));
    };

    Logger.prototype.addMessage = function(message) {
      if (!this.messageAcceptable(message)) {
        throw new Error("Unacceptable message format in logger: " + this.name);
      }
      return this.messageBuffer.push(message);
    };

    Logger.prototype.processBuffer = function(func) {
      var f, obj, _i, _len, _ref;
      if (!(this.messageBuffer.length > 0)) {
        return;
      }
      f = func != null ? func : this.func;
      _ref = this.messageBuffer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        f(obj);
      }
      return this.messageBuffer = [];
    };

    return Logger;

  })();

  Observatory.GenericEmitter = (function(_super) {
    __extends(GenericEmitter, _super);

    function GenericEmitter(name, maxSeverity) {
      var i, m, _i, _len, _ref;
      this.maxSeverity = maxSeverity;
      GenericEmitter.__super__.constructor.call(this, name);
      _ref = ['fatal', 'error', 'warn', 'info', 'verbose', 'debug', 'insaneVerbose'];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        m = _ref[i];
        this.m = function(message, module, obj) {
          return this._emitWithSeverity(i, message, obj, module);
        };
      }
    }

    GenericEmitter.prototype._emitWithSeverity = function(severity, message, obj, module) {};

    return GenericEmitter;

  })(Observatory.MessageEmitter);

  console.log(Observatory);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Observatory = Observatory;

}).call(this);
